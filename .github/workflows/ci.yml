---
name: CI
on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '0 6 * * *'

env:
  COLORTERM: 'yes'
  TERM: 'xterm-256color'
  PYTEST_ADDOPTS: '--color=yes'

jobs:
  linter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.11"]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: ansible_collections/middleware_automation/common

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'

      - name: Install yamllint, ansible and molecule
        run: |
          python -m pip install --upgrade pip
          pip install yamllint ansible-core ansible-lint
          if [ -f ansible_collections/middleware_automation/common/requirements.txt ]; then
            pip install -r ansible_collections/middleware_automation/common/requirements.txt
          fi
  
      - name: Create default collection path
        run: |
          mkdir -p /home/runner/.ansible/
          ln -s /home/runner/work/common/common /home/runner/.ansible/collections

      - name: Install ansible-lint custom rules
        uses: actions/checkout@v3
        with:
          repository: ansible-middleware/ansible-lint-custom-rules
          path: ansible_collections/ansible-lint-custom-rules/

      - name: Run linter
        run: |
          ansible-lint --version
          ansible-lint -v
        working-directory: ./ansible_collections/middleware_automation/common

  sanity:
    uses: ansible-network/github_actions/.github/workflows/sanity.yml@main
    with:
      matrix_include: "[]"
      matrix_exclude: >-
          [
            {
              "ansible-version": "stable-2.9"
            },
            {
              "ansible-version": "stable-2.12",
              "python-version": "3.7"
            },
            {
              "ansible-version": "stable-2.12",
              "python-version": "3.11"
            },
            {
              "ansible-version": "stable-2.13",
              "python-version": "3.7"
            },
            {
              "ansible-version": "stable-2.13",
              "python-version": "3.11"
            },
            {
              "ansible-version": "stable-2.14",
              "python-version": "3.7"
            },
            {
              "ansible-version": "stable-2.14",
              "python-version": "3.8"
            },
            {
              "ansible-version": "stable-2.14",
              "python-version": "3.11"
            },
            {
              "ansible-version": "stable-2.15",
              "python-version": "3.7"
            },
            {
              "ansible-version": "stable-2.15",
              "python-version": "3.8"
            },
            {
              "ansible-version": "stable-2.15",
              "python-version": "3.11"
            },
            {
              "ansible-version": "milestone",
              "python-version": "3.7"
            },
            {
              "ansible-version": "milestone",
              "python-version": "3.8"
            },
            {
              "ansible-version": "devel",
              "python-version": "3.7"
            },
            {
              "ansible-version": "devel",
              "python-version": "3.8"
            },
            {
              "ansible-version": "devel",
              "python-version": "3.9"
            }
          ]
  molecule:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.11"]
        ansible_version: ["2.14", "2.15"]
        molecule_test:
          - prod_eap
          - stage_eap
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          path: ansible_collections/middleware_automation/common

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          cache: 'pip'

      - name: Create default collection path
        run: |
          mkdir -p /home/runner/.ansible/
          ln -s /home/runner/work/common/common /home/runner/.ansible/collections

      - name: Install ansible and molecule
        run: |
          python -m pip install --upgrade pip
          pip install 'molecule>=4.0.4' 'molecule-plugins[docker]>=23.0.0' ansible-core==${{ matrix.ansible_version }}
          if [ -f ansible_collections/middleware_automation/common/requirements.txt ]; then
            pip install -r ansible_collections/middleware_automation/common/requirements.txt
          fi
          if [ -f ansible_collections/middleware_automation/common/requirements.yml ]; then
            ansible-galaxy collection install -r ansible_collections/middleware_automation/common/requirements.yml -p /home/runner/.ansible/collections --force-with-deps
          fi
          if [ -f ansible_collections/middleware_automation/common/molecule/requirements.yml ]; then
            ansible-galaxy collection install -r ansible_collections/middleware_automation/common/molecule/requirements.yml -p /home/runner/.ansible/collections
          fi

      - name: Run molecule test
        run: molecule test -s ${{ matrix.molecule_test }}
        working-directory: ./ansible_collections/middleware_automation/common
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          PROD_JBOSSNETWORK_API_CLIENTID: '${{ secrets.PROD_JBOSSNETWORK_API_CLIENTID }}'
          PROD_JBOSSNETWORK_API_SECRET: '${{ secrets.PROD_JBOSSNETWORK_API_SECRET }}'
          STAGE_JBOSSNETWORK_API_CLIENTID: '${{ secrets.STAGE_JBOSSNETWORK_API_CLIENTID }}'
          STAGE_JBOSSNETWORK_API_SECRET: '${{ secrets.STAGE_JBOSSNETWORK_API_SECRET }}'
